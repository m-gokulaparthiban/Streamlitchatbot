# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N9OTwfakTFPtdMVqDQuzFzGzZ3DTyJbV
"""

!pip install gradio google-generativeai gtts pydub

pip install SpeechRecognition

import google.generativeai as genai

GEMINI_API_KEY = "AIzaSyBavP_6cojjsQ1SfPDMvihWs8pzROvUBgw"

try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel("gemini-pro")
except Exception as e:
    raise RuntimeError(f"Failed to initialize Gemini model: {e}")

from gtts import gTTS
import os
from pydub import AudioSegment
from pydub.playback import play

def text_to_speech(text, filename="output.mp3"):
    try:
        if not text.strip():
            raise ValueError("Empty text received for speech conversion.")
        tts = gTTS(text=text, lang='en')
        tts.save(filename)
        return filename
    except Exception as e:
        print(f"Text-to-speech failed: {e}")
        return None

def mood_support_bot(text_input=None, audio_input=None):
    try:
        user_input = ""

        if audio_input:
            audio = AudioSegment.from_file(audio_input)
            audio.export("temp.wav", format="wav")
            import speech_recognition as sr
            recognizer = sr.Recognizer()
            with sr.AudioFile("temp.wav") as source:
                audio_data = recognizer.record(source)
                user_input = recognizer.recognize_google(audio_data)
        elif text_input:
            user_input = text_input.strip()

        if not user_input:
            return "Please provide input.", None

        prompt = f"""
        You are a supportive mental wellness assistant. A user says: "{user_input}".
        Analyze their mood and provide comforting advice or encouragement.
        """
        response = model.generate_content(prompt)
        audio_file = text_to_speech(response.text, "mood_response.mp3")
        return response.text, audio_file

    except Exception as e:
        print(f"Mood Support Error: {e}")
        return "Sorry, something went wrong while processing your mood.", None

def medical_suggestion_bot(text_input=None, audio_input=None):
    try:
        user_input = ""

        if audio_input:
            audio = AudioSegment.from_file(audio_input)
            audio.export("temp.wav", format="wav")
            import speech_recognition as sr
            recognizer = sr.Recognizer()
            with sr.AudioFile("temp.wav") as source:
                audio_data = recognizer.record(source)
                user_input = recognizer.recognize_google(audio_data)
        elif text_input:
            user_input = text_input.strip()

        if not user_input:
            return "Please describe your concern.", None

        prompt = f"""
        You are a medical mental health assistant. A user says: "{user_input}".
        Provide general treatment advice or refer them to a professional.
        Avoid diagnosing, but help them take the next steps.
        """
        response = model.generate_content(prompt)
        audio_file = text_to_speech(response.text, "medical_response.mp3")
        return response.text, audio_file

    except Exception as e:
        print(f"Medical Suggestion Error: {e}")
        return "Sorry, I couldn't process your request right now.", None

import gradio as gr

# Mood Support Interface
mood_interface = gr.Interface(
    fn=mood_support_bot,
    inputs=[
        gr.Textbox(label="Your Mood", placeholder="I feel anxious...", lines=2),
        gr.Audio(type="filepath", label="Or Speak Your Mood")
    ],
    outputs=[
        gr.Textbox(label="Supportive Text"),
        gr.Audio(label="Voice Output")
    ],
    title="ðŸ§  Mood Support Chatbot",
    description="Describe how you're feeling and receive empathetic support."
)

# Medical Suggestion Interface
medical_interface = gr.Interface(
    fn=medical_suggestion_bot,
    inputs=[
        gr.Textbox(label="Your Mental Health Concern", placeholder="I'm not sleeping well...", lines=2),
        gr.Audio(type="filepath", label="Or Speak Your Issue")
    ],
    outputs=[
        gr.Textbox(label="Medical Suggestion"),
        gr.Audio(label="Voice Output")
    ],
    title="ðŸ©º Medical Treatment Suggestion Bot",
    description="Get suggestions for your mental health concern or treatment options."
)

app = gr.TabbedInterface(
    interface_list=[mood_interface, medical_interface],
    tab_names=["Mood Support", "Medical Suggestion"]
)





try:
    app.launch()
except Exception as e:
    print(f"App failed to launch: {e}")